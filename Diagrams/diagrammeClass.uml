@startuml
!theme mars

' === Entités principales du jeu ===

class Game {
  - int money
  - Seed* currentPlantOnPlot
  - SeedReservoir seedReservoir
  - list<ActiveEffect*> activeEffects
  - Soil soil
  - AutoClicker autoClicker
  + void startGame()
  + void handleClickOnPlot()
  + void buyChest(ChestType type)
  + void applyEffect(Effect* effect)
  + void plantNextSeed()
}

class Soil {
  - int degradationProgress
  + void increase()
  + void reset()
  + int getDegradationPenalty()
}

class AutoClicker {
  - int remainingTime
  + void start(int duration)
  + void tick(Game& game)
}

class SeedReservoir {
  - map<SeedType, int> seeds
  - SeedType selectedSeedType
  + int getSeedQuantity(SeedType type)
  + void addSeed(SeedType type, int quantity)
  + void removeSeed(SeedType type, int quantity)
  + void removeRandomSeeds(int quantity)
  + void setSelectedSeed(SeedType type)
  + SeedType getSelectedSeed()
  + SeedType getRandomNonWheatSeed()
}

' === Graine ===

abstract class Seed {
  - string name
  - int clicksToGrowBase
  - int moneyRaised
  - int currentClicksToGrow
  + void applyGrowthModifier(int modifier)
  + int getClicksToGrow()
  + int getMoneyRaised()
  + void resetClicks()
}

class WheatSeed
class RareSeed

Seed <|-- WheatSeed
Seed <|-- RareSeed

' === Coffres ===

abstract class Chest {
  - int cost
  + abstract void open(Game& game)
}

class SeedChest
class UtilityChest

Chest <|-- SeedChest
Chest <|-- UtilityChest

' === Effets génériques (utilitaires ou malus) ===

abstract class Effect {
  - string name
  - int duration ' 0 if permanent or immediate
  + abstract void applyEffect(Game& game)
  + virtual void removeEffect(Game& game)
}

class ActiveEffect {
  - Effect* effect
  - int remainingDuration
  + void tick(Game& game)
}

' Utilitaires

class Pesticide
class Fertilizer
class Harvester
class CleaningRobot
class GMO
class EconomicCrisis

Effect <|-- Pesticide
Effect <|-- Fertilizer
Effect <|-- Harvester
Effect <|-- CleaningRobot
Effect <|-- GMO
Effect <|-- EconomicCrisis

' Malus

class Storm
class Frost
class Thief
class Expiration

Effect <|-- Storm
Effect <|-- Frost
Effect <|-- Thief
Effect <|-- Expiration

' === Énumérations ===

enum SeedType {
  WHEAT
  // Add other rare seed types here
}

enum ChestType {
  SEED_CHEST
  UTILITY_CHEST
}

' === Relations ===

Game "1" -- "1" SeedReservoir : has
Game "1" -- "0..1" Seed : currentPlantOnPlot
Game "1" -- "*" ActiveEffect : activeEffects
Game "1" -- "1" Soil
Game "1" -- "1" AutoClicker

SeedReservoir ..> SeedType : manages
Game ..> ChestType : uses
Game ..> SeedType : uses

@enduml

